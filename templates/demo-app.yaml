{{- if .Values.demoApp.enabled }}
# Demo App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "elk-stack.fullname" . }}-demo-app
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "elk-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: demo-app
spec:
  replicas: {{ .Values.demoApp.replicas }}
  selector:
    matchLabels:
      {{- include "elk-stack.demoapp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "elk-stack.demoapp.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - name: demo-app
        image: {{ .Values.demoApp.image.repository }}:{{ .Values.demoApp.image.tag }}
        imagePullPolicy: {{ .Values.demoApp.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.demoApp.service.port }}
        env:
        - name: ELASTIC_APM_SERVER_URL
          value: "http://apm-server.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.apmServer.service.port }}"
        - name: ELASTIC_APM_SERVICE_NAME
          value: "demo-nodejs-app"
        - name: ELASTIC_APM_ENVIRONMENT
          value: "development"
        - name: ELASTIC_APM_LOG_LEVEL
          value: "info"
        - name: ELASTIC_APM_ACTIVE
          value: "true"
        command: ["sh", "-c"]
        args:
          - |
            # Create package.json first
            cat > package.json << 'EOF'
            {
              "name": "demo-app-apm",
              "version": "1.0.0",
              "description": "Demo Node.js app with Elastic APM integration",
              "main": "app.js",
              "dependencies": {
                "elastic-apm-node": "^4.0.0",
                "express": "^4.18.0",
                "winston": "^3.8.0"
              },
              "scripts": {
                "start": "node app.js"
              }
            }
            EOF
            
            # Install dependencies
            npm install
            
            # Create the app with enhanced features
            cat > app.js << 'EOF'
            // Initialize APM first
            const apm = require('elastic-apm-node').start({
              serviceName: process.env.ELASTIC_APM_SERVICE_NAME || 'demo-nodejs-app',
              environment: process.env.ELASTIC_APM_ENVIRONMENT || 'development',
              serverUrl: process.env.ELASTIC_APM_SERVER_URL,
              logLevel: process.env.ELASTIC_APM_LOG_LEVEL || 'info',
              active: process.env.ELASTIC_APM_ACTIVE === 'true',
              captureBody: 'all',
              captureHeaders: true
            });

            const express = require('express');
            const winston = require('winston');

            // Configure Winston logger
            const logger = winston.createLogger({
              level: 'info',
              format: winston.format.combine(
                winston.format.timestamp(),
                winston.format.errors({ stack: true }),
                winston.format.json()
              ),
              transports: [
                new winston.transports.Console(),
                new winston.transports.File({ filename: 'app.log' })
              ]
            });

            const app = express();
            const port = 3000;

            // Middleware for logging requests
            app.use((req, res, next) => {
              logger.info(`${req.method} ${req.path}`, {
                method: req.method,
                path: req.path,
                userAgent: req.get('User-Agent'),
                ip: req.ip
              });
              next();
            });

            app.use(express.json());

            // Routes
            app.get('/', (req, res) => {
              logger.info('Root endpoint accessed');
              res.json({
                message: 'Hello World with APM!',
                timestamp: new Date().toISOString(),
                version: '1.0.0',
                apm: {
                  active: apm.isStarted(),
                  serviceName: process.env.ELASTIC_APM_SERVICE_NAME
                }
              });
            });

            app.get('/health', (req, res) => {
              res.json({
                status: 'healthy',
                timestamp: new Date().toISOString(),
                uptime: process.uptime()
              });
            });

            app.get('/error', (req, res) => {
              const error = new Error('This is a test error for APM!');
              logger.error('Test error endpoint called', { error: error.message });
              apm.captureError(error);
              throw error;
            });

            app.get('/slow', async (req, res) => {
              const span = apm.startSpan('slow-operation');
              logger.info('Slow endpoint called - starting slow operation');
              
              await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
              
              if (span) span.end();
              logger.info('Slow operation completed');
              res.json({
                message: 'Slow response completed!',
                timestamp: new Date().toISOString()
              });
            });

            app.get('/database', async (req, res) => {
              const span = apm.startSpan('database-query', 'db');
              logger.info('Database endpoint called');
              
              // Simulate database query
              await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));
              
              const users = [
                { id: 1, name: 'John Doe', email: 'john@example.com' },
                { id: 2, name: 'Jane Smith', email: 'jane@example.com' },
                { id: 3, name: 'Bob Johnson', email: 'bob@example.com' }
              ];
              
              if (span) span.end();
              logger.info(`Database query completed, returned ${users.length} users`);
              
              res.json({
                data: users,
                count: users.length,
                timestamp: new Date().toISOString()
              });
            });

            app.post('/users', (req, res) => {
              logger.info('Create user endpoint called', { body: req.body });
              
              // Simulate user creation
              const user = {
                id: Date.now(),
                ...req.body,
                createdAt: new Date().toISOString()
              };
              
              logger.info('User created successfully', { userId: user.id });
              res.status(201).json(user);
            });

            app.get('/metrics', (req, res) => {
              const metrics = {
                memory: process.memoryUsage(),
                uptime: process.uptime(),
                platform: process.platform,
                nodeVersion: process.version,
                timestamp: new Date().toISOString()
              };
              
              res.json(metrics);
            });

            // Error handling middleware
            app.use((err, req, res, next) => {
              logger.error('Unhandled error', { 
                error: err.message, 
                stack: err.stack,
                path: req.path,
                method: req.method
              });
              
              apm.captureError(err);
              
              res.status(500).json({
                error: 'Internal Server Error',
                message: err.message,
                timestamp: new Date().toISOString()
              });
            });

            // Start server
            app.listen(port, () => {
              logger.info(`Demo app listening at http://localhost:${port}`, {
                port: port,
                nodeVersion: process.version,
                apmActive: apm.isStarted()
              });
            });

            // Graceful shutdown
            process.on('SIGTERM', () => {
              logger.info('SIGTERM received, shutting down gracefully');
              process.exit(0);
            });

            process.on('SIGINT', () => {
              logger.info('SIGINT received, shutting down gracefully');
              process.exit(0);
            });
            EOF
            
            # Start the application
            npm start
        resources:
          {{- toYaml .Values.demoApp.resources | nindent 10 }}
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.demoApp.service.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.demoApp.service.port }}
          initialDelaySeconds: 60
          periodSeconds: 30
---
# Demo App Service
apiVersion: v1
kind: Service
metadata:
  name: {{ include "elk-stack.fullname" . }}-demo-app
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "elk-stack.labels" . | nindent 4 }}
    app.kubernetes.io/component: demo-app
spec:
  selector:
    {{- include "elk-stack.demoapp.selectorLabels" . | nindent 4 }}
  ports:
    - name: http
      port: {{ .Values.demoApp.service.port }}
      targetPort: {{ .Values.demoApp.service.port }}
      {{- if eq .Values.demoApp.service.type "NodePort" }}
      nodePort: {{ .Values.demoApp.service.nodePort }}
      {{- end }}
  type: {{ .Values.demoApp.service.type }}
{{- end }}