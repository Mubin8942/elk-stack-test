{{- if .Values.certificates.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "elk-stack.fullname" . }}-cert-generator
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "elk-stack.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "elk-stack.fullname" . }}-cert-generator
    spec:
      restartPolicy: Never
      containers:
      - name: cert-generator
        image: alpine/openssl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          # Create directory for certificates
          mkdir -p /certs
          cd /certs
          
          echo "Generating CA private key..."
          openssl genrsa -out ca.key 2048
          
          echo "Generating CA certificate..."
          openssl req -new -x509 -sha256 -key ca.key -out ca.crt -days {{ .Values.certificates.caValidityDays }} \
            -subj "/CN=Elasticsearch CA"
          
          echo "Generating Elasticsearch node private key..."
          openssl genrsa -out elasticsearch.key 2048
          
          echo "Generating Elasticsearch node certificate signing request..."
          openssl req -new -key elasticsearch.key -out elasticsearch.csr \
            -subj "/CN=elasticsearch.{{ .Values.global.namespace }}.svc.cluster.local"
          
          echo "Creating extfile for subjectAltName..."
          cat > elasticsearch.ext << EOF
          subjectAltName = DNS:elasticsearch,DNS:elasticsearch.{{ .Values.global.namespace }},DNS:elasticsearch.{{ .Values.global.namespace }}.svc,DNS:elasticsearch.{{ .Values.global.namespace }}.svc.cluster.local,DNS:localhost,IP:127.0.0.1
          EOF
          
          echo "Signing the Elasticsearch node certificate..."
          openssl x509 -req -in elasticsearch.csr -CA ca.crt -CAkey ca.key -CAcreateserial \
            -out elasticsearch.crt -days {{ .Values.certificates.certValidityDays }} -sha256 -extfile elasticsearch.ext
          
          echo "Creating PKCS12 keystore for Elasticsearch..."
          openssl pkcs12 -export -in elasticsearch.crt -inkey elasticsearch.key \
            -out elasticsearch.p12 -passout pass:"" -name "elasticsearch"
          
          echo "Setting file permissions..."
          chmod 644 *.crt *.key *.p12
          
          echo "Certificates generated successfully!"
          ls -la /certs/
        volumeMounts:
        - name: certs-volume
          mountPath: /certs
      volumes:
      - name: certs-volume
        emptyDir: {}
      initContainers:
      - name: create-certs-secret
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          # Wait for cert generation to complete, then create secret
          sleep 5
          kubectl create secret generic {{ include "elk-stack.fullname" . }}-certs \
            -n {{ .Values.global.namespace }} \
            --from-file=/certs/ \
            --dry-run=client -o yaml | kubectl apply -f -
        volumeMounts:
        - name: certs-volume
          mountPath: /certs
{{- end }}