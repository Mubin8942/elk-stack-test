apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "elk-stack.fullname" . }}-post-install
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "elk-stack.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "elk-stack.fullname" . }}-post-install
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-config
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Waiting for Elasticsearch to be ready..."
          until curl -k -f -s -o /dev/null \
            {{- if .Values.elasticsearch.ssl.enabled }}
            "https://{{ include "elk-stack.fullname" . }}-elasticsearch.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.elasticsearch.service.httpPort }}/_cluster/health" \
            {{- else }}
            "http://{{ include "elk-stack.fullname" . }}-elasticsearch.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.elasticsearch.service.httpPort }}/_cluster/health" \
            {{- end }}
            -u "elastic:{{ .Values.elasticsearch.auth.elasticPassword }}"; do
            echo "Waiting for Elasticsearch..."
            sleep 10
          done
          
          echo "Elasticsearch is ready. Setting up kibana_system user password..."
          curl -k -X POST \
            {{- if .Values.elasticsearch.ssl.enabled }}
            "https://{{ include "elk-stack.fullname" . }}-elasticsearch.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.elasticsearch.service.httpPort }}/_security/user/kibana_system/_password" \
            {{- else }}
            "http://{{ include "elk-stack.fullname" . }}-elasticsearch.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.elasticsearch.service.httpPort }}/_security/user/kibana_system/_password" \
            {{- end }}
            -H "Content-Type: application/json" \
            -u "elastic:{{ .Values.elasticsearch.auth.elasticPassword }}" \
            -d '{"password": "{{ .Values.kibana.auth.kibanaPassword }}"}'
          
          echo "Waiting for Kibana to be ready..."
          sleep 30
          until curl -f -s -o /dev/null \
            "http://{{ include "elk-stack.fullname" . }}-kibana.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.kibana.service.port }}/api/status"; do
            echo "Waiting for Kibana..."
            sleep 10
          done
          
          echo "Creating Logstash index pattern in Kibana..."
          curl -X POST \
            "http://{{ include "elk-stack.fullname" . }}-kibana.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.kibana.service.port }}/api/saved_objects/index-pattern" \
            -H "kbn-xsrf: true" \
            -H "Content-Type: application/json" \
            -u "elastic:{{ .Values.elasticsearch.auth.elasticPassword }}" \
            -d '{
              "attributes": {
                "title": "logstash-*",
                "timeFieldName": "@timestamp"
              }
            }' || echo "Index pattern may already exist"
          
          {{- if .Values.apmServer.enabled }}
          echo "Waiting for APM Server to be ready..."
          until curl -f -s -o /dev/null \
            "http://{{ include "elk-stack.fullname" . }}-apm-server.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.apmServer.service.port }}/"; do
            echo "Waiting for APM Server..."
            sleep 10
          done
          
          echo "Creating APM index pattern in Kibana..."
          curl -X POST \
            "http://{{ include "elk-stack.fullname" . }}-kibana.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.kibana.service.port }}/api/saved_objects/index-pattern" \
            -H "kbn-xsrf: true" \
            -H "Content-Type: application/json" \
            -u "elastic:{{ .Values.elasticsearch.auth.elasticPassword }}" \
            -d '{
              "attributes": {
                "title": "apm-*",
                "timeFieldName": "@timestamp"
              }
            }' || echo "APM index pattern may already exist"
          {{- end }}
          
          echo "Post-install configuration completed successfully!"