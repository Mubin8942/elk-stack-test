1. Get the application URLs by running these commands:

{{- if .Values.kibana.enabled }}
{{- if eq .Values.kibana.service.type "NodePort" }}
  export NODE_PORT=$(kubectl get --namespace {{ .Values.global.namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "elk-stack.fullname" . }}-kibana)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.global.namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Kibana URL: http://$NODE_IP:$NODE_PORT"
{{- else if eq .Values.kibana.service.type "LoadBalancer" }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Values.global.namespace }} svc -w {{ include "elk-stack.fullname" . }}-kibana'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Values.global.namespace }} {{ include "elk-stack.fullname" . }}-kibana --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo "Kibana URL: http://$SERVICE_IP:{{ .Values.kibana.service.port }}"
{{- else if eq .Values.kibana.service.type "ClusterIP" }}
  kubectl --namespace {{ .Values.global.namespace }} port-forward svc/{{ include "elk-stack.fullname" . }}-kibana {{ .Values.kibana.service.port }}:{{ .Values.kibana.service.port }}
  echo "Kibana URL: http://127.0.0.1:{{ .Values.kibana.service.port }}"
{{- end }}
{{- end }}

{{- if .Values.apmServer.enabled }}
{{- if eq .Values.apmServer.service.type "NodePort" }}
  export APM_NODE_PORT=$(kubectl get --namespace {{ .Values.global.namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "elk-stack.fullname" . }}-apm-server)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.global.namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "APM Server URL: http://$NODE_IP:$APM_NODE_PORT"
{{- else if eq .Values.apmServer.service.type "ClusterIP" }}
  kubectl --namespace {{ .Values.global.namespace }} port-forward svc/{{ include "elk-stack.fullname" . }}-apm-server {{ .Values.apmServer.service.port }}:{{ .Values.apmServer.service.port }}
  echo "APM Server URL: http://127.0.0.1:{{ .Values.apmServer.service.port }}"
{{- end }}
{{- end }}

{{- if .Values.demoApp.enabled }}
{{- if eq .Values.demoApp.service.type "NodePort" }}
  export DEMO_NODE_PORT=$(kubectl get --namespace {{ .Values.global.namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "elk-stack.fullname" . }}-demo-app)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.global.namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Demo App URL: http://$NODE_IP:$DEMO_NODE_PORT"
{{- else if eq .Values.demoApp.service.type "ClusterIP" }}
  kubectl --namespace {{ .Values.global.namespace }} port-forward svc/{{ include "elk-stack.fullname" . }}-demo-app {{ .Values.demoApp.service.port }}:{{ .Values.demoApp.service.port }}
  echo "Demo App URL: http://127.0.0.1:{{ .Values.demoApp.service.port }}"
{{- end }}
{{- end }}

2. Default credentials:
   - Elasticsearch user: elastic
   - Elasticsearch password: {{ .Values.elasticsearch.auth.elasticPassword }}
   - Kibana user: elastic
   - Kibana password: {{ .Values.elasticsearch.auth.elasticPassword }}

3. To access Elasticsearch directly:
{{- if .Values.elasticsearch.ssl.enabled }}
   kubectl --namespace {{ .Values.global.namespace }} port-forward svc/elasticsearch 9200:9200
   curl -k -u elastic:{{ .Values.elasticsearch.auth.elasticPassword }} https://localhost:9200
{{- else }}
   kubectl --namespace {{ .Values.global.namespace }} port-forward svc/elasticsearch 9200:9200
   curl -u elastic:{{ .Values.elasticsearch.auth.elasticPassword }} http://localhost:9200
{{- end }}

4. To check the status of all components:
   kubectl --namespace {{ .Values.global.namespace }} get pods

5. To view logs:
   kubectl --namespace {{ .Values.global.namespace }} logs -l app.kubernetes.io/instance={{ .Release.Name }} -f

6. Demo Application Endpoints:
{{- if .Values.demoApp.enabled }}
   - GET  /            - Hello World
   - GET  /health      - Health check
   - GET  /slow        - Slow response (for testing)
   - GET  /error       - Error response (for testing)
   - GET  /database    - Simulated database query
   - POST /users       - Create user
   - GET  /metrics     - Application metrics
{{- end }}

7. Index Patterns:
   - logstash-*    (for application logs)
{{- if .Values.apmServer.enabled }}
   - apm-*         (for APM data)
{{- end }}

8. To uninstall the chart:
   helm uninstall {{ .Release.Name }} -n {{ .Values.global.namespace }}

9. Useful kubectl commands:
   # Scale Elasticsearch
   kubectl --namespace {{ .Values.global.namespace }} scale deployment {{ include "elk-stack.fullname" . }}-elasticsearch --replicas=2
   
   # Restart a component
   kubectl --namespace {{ .Values.global.namespace }} rollout restart deployment {{ include "elk-stack.fullname" . }}-kibana
   
   # Check resource usage
   kubectl --namespace {{ .Values.global.namespace }} top pods

{{- if .Values.elasticsearch.ssl.enabled }}
10. SSL/TLS is enabled. Certificates are automatically generated and managed by the chart.
{{- end }}

Thank you for using the ELK Stack Helm Chart!